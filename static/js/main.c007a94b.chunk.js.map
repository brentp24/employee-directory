{"version":3,"sources":["utils/API.js","components/Table/index.js","components/SearchForm/index.js","components/Container/index.js","pages/Home.jsx","pages/Login.js","components/NavBar/NavBar.jsx","components/Footer/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Table","props","items","config","React","useState","sortConfig","setSortConfig","sortedItems","useMemo","sortableItems","sort","a","b","key","direction","requestSort","useSortableData","shown","className","type","onClick","map","item","id","src","image","alt","first","firstName","lastName","phone","email","Moment","dob","format","SearchForm","htmlFor","value","search","onChange","handleInputChange","name","placeholder","Container","fluid","Home","loadEmployees","API","then","res","employees","data","results","newState","emp","picture","medium","last","date","setState","event","target","preventDefault","state","filter","toLowerCase","includes","searchResults","this","style","minHeight","Component","Login","NavBar","to","window","location","pathname","Footer","Wrapper","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c007a94b.chunk.js","sourcesContent":["//api call\r\n\r\nimport axios from \"axios\";\r\n\r\nconst APIURL = \"https://randomuser.me/api/?results=200&nat=us\";\r\n\r\nexport default {\r\n    \r\n    getDirectory: function() {\r\n        return axios.get(APIURL) \r\n    }\r\n}","import React from \"react\";\nimport Moment from \"moment\";\nimport \"./style.css\";\n//copied from https://codesandbox.io/s/table-sorting-example-ur2z9?from-embed=&file=/src/App.js:51-977\nconst useSortableData = (items, config = null) => {\n  const [sortConfig, setSortConfig] = React.useState(config);\n\n  const sortedItems = React.useMemo(() => {\n    let sortableItems = [...items];\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = 'ascending';\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === 'ascending'\n    ) {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { items: sortedItems, requestSort, sortConfig };\n};\n\nfunction Table(props) {\n  const { items, requestSort } = useSortableData(props.shown);\n  return (\n    <table className=\"table is-fullwidth\">\n      <thead className=\"thead-dark\">\n        <tr>\n          <th>Image</th>\n          <th>\n            <button type=\"button\" onClick={() => requestSort('firstName')}\n              className=\"btn-dark fa fa-sort\"\n            >\n              First\n            </button>\n          </th>\n          <th>\n            <button type=\"button\" onClick={() => requestSort('lastName')}\n              className=\"btn-dark fa fa-sort\">\n              Last\n            </button>\n          </th>\n          <th>Phone</th>\n          <th>Email</th>\n          <th>\n            <button type=\"button\" onClick={() => requestSort('dob')}\n              className=\"btn-dark fa fa-sort\">\n              DOB\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {items.map(item => (\n          <tr key={item.id}>\n            <td><img src={item.image} alt={item.first} /> </td>\n            <td>{item.firstName}</td>\n            <td>{item.lastName}</td>\n            <td>{item.phone}</td>\n            <td>{item.email}</td>\n            <td> {Moment(item.dob).format(\"MMMM D, YYYY\")}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n\n  )\n}\n\nexport default Table;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm(props) {\n  return (\n    <form className=\"search\">\n      <div className=\"form-group\">\n        <label htmlFor=\"employees\">Employee Name:</label>\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"employeeSearch\"\n          // list=\"breeds\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"search by employee\"\n          id=\"employeeSearch\"\n        />\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React, { Component } from \"react\";\nimport API from \"../utils/API.js\";\nimport Table from \"../components/Table\";\nimport SearchForm from \"../components/SearchForm\"\nimport Container from \"../components/Container\"\n\nclass Home extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      employees: [],\n      searchResults: [],\n      shown: []\n    };\n  }\n  loadEmployees = () => {\n    API.getDirectory()\n      .then(res => {\n        let employees = res.data.results;\n        let shown = []\n        shown = employees.map(emp => ({\n          id: emp.id.value,\n          image: emp.picture.medium,\n          firstName: emp.name.first,\n          lastName: emp.name.last,\n          phone: emp.phone,\n          email: emp.email,\n          dob: emp.dob.date\n        }))\n        let newState = { shown, employees };\n        this.setState(newState);\n      })\n  }\n\n  componentDidMount() {\n    this.loadEmployees();\n  }\n\n  handleInputChange = event => {\n    const search = event.target.value\n    event.preventDefault();\n    let employees = this.state.employees;\n    const shown = employees\n    .filter(emp =>\n      (emp.name.first +\" \" + emp.name.last).toLowerCase().includes(search.toLowerCase())\n    )\n    .map(emp => ({\n      id: emp.id.value,\n      image: emp.picture.medium,\n      firstName: emp.name.first,\n      lastName: emp.name.last,\n      phone: emp.phone,\n      email: emp.email,\n      dob: emp.dob.date\n    }))\n    let newState = { shown, employees };\n    this.setState(newState);\n    \n  };\n\n  // handleFormSubmit = event => {\n  //   event.preventDefault();\n  //   let employees = this.state.employees;\n  //   const shown = employees\n  //   .filter(emp =>\n  //     (emp.name.first +\" \" + emp.name.last).toLowerCase().includes(this.state.search.toLowerCase())\n  //   )\n  //   .map(emp => ({\n  //     id: emp.id.value,\n  //     image: emp.picture.medium,\n  //     firstName: emp.name.first,\n  //     lastName: emp.name.last,\n  //     phone: emp.phone,\n  //     email: emp.email,\n  //     dob: emp.dob.date\n  //   }))\n  //   let newState = { shown, employees };\n  //   this.setState(newState);\n  // };\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"text-center\">Find your colleagues</h1>\n        <Container style={{ minHeight: \"80%\" }}>\n          <SearchForm\n            // handleFormSubmit={this.handleFormSubmit}\n            handleInputChange={this.handleInputChange}\n          \n          />\n          <Table shown={this.state.shown}>\n          </Table>\n        </Container>\n      </div>\n    );\n  }\n\n};\n\nexport default Home;\n","import React from \"react\";\n\n\nfunction Login() {\n  return (\n    <div>\n      To be built out later\n    </div>\n  );\n}\n\nexport default Login;\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./style.css\";\r\n\r\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\r\nfunction NavBar() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-md bg-light\">\r\n            <Link className=\"navbar-collapse collapse w-100 order-1 order-md-0 dual-collapse2\" to=\"/\">\r\n                Big Company\r\n            </Link>\r\n            <div>\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link\r\n                            to=\"/\"\r\n                            className=\"navbar-collapse collapse w-100 order-1 order-md-0 dual-collapse2\"\r\n                        >\r\n                            Directory\r\n\r\n                        </Link>\r\n\r\n    \r\n                    </li>\r\n                </ul>\r\n                </div>\r\n                <div className=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link\r\n                            to=\"/login\"\r\n                            className={window.location.pathname === \"../../pages/Login.js\" ? \"nav-link active\" : \"nav-link\"}\r\n                        >\r\n                            Login\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>Big Company 2020</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home.jsx\";\nimport Login from \"./pages/Login\";\nimport NavBar from \"./components/NavBar\";\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport Container from \"./components/Container\";\n\nfunction App() {\n  return (\n\n      <Router>\n        <div>\n          <NavBar />\n          <Wrapper>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n          </Wrapper>\n          <Home />\n          <Footer />\n        </div>\n      </Router>\n\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}